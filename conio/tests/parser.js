// Generated by CoffeeScript 1.9.3
(function() {
  var assert, parser, should;

  assert = require('assert');

  parser = require('../parser');

  should = require('should');

  describe('module', function() {
    it('availible', function() {
      return assert(parser && parser.parse && parser.tokenize);
    });
    describe('trims', function() {
      return it('string', function() {
        return assert.equal('tok str', parser.util.trim(' \t tok \t  str \t  '));
      });
    });
    describe('tokenizes', function() {
      it('simple string', function() {
        return assert.deepEqual(parser.tokenize('app --key seg -k seg -p password'), ['app', '--key', 'seg', '-k', 'seg', '-p', 'password']);
      });
      it('string without \' and " symbols, but with feature -kvalue', function() {
        return assert.deepEqual(parser.tokenize('app --key seg -k seg -ppassword'), ['app', '--key', 'seg', '-k', 'seg', '-p', 'password']);
      });
      return it('string with multiple spaces', function() {
        return assert.deepEqual(parser.tokenize('app token   token'), ['app', 'token', 'token']);
      });
    });
    describe('parses', function() {
      it('simple string contains only appname', function() {
        return assert.deepEqual(parser.parse('app'), {
          original: 'app',
          tokenized: ['app'],
          parsed: {
            appname: 'app',
            nokey: []
          }
        });
      });
      return it('string without any keys', function() {
        return assert.deepEqual(parser.parse('app a b c d e f'), {
          original: 'app a b c d e f',
          tokenized: ['app', 'a', 'b', 'c', 'd', 'e', 'f'],
          parsed: {
            appname: 'app',
            nokey: ['a', 'b', 'c', 'd', 'e', 'f']
          }
        });
      });
    });
    return describe('not parses', function() {
      return it('appname when flag "parseAppname" is unset', function() {
        return assert(parser.parse('itisnotappname', {
          parseAppname: false
        }).parsed.should.not.have.property('appname'));
      });
    });
  });

}).call(this);

//# sourceMappingURL=parser.js.map
